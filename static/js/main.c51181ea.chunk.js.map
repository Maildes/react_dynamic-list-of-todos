{"version":3,"sources":["helpers/api.ts","components/TodoCard.tsx","components/Button.tsx","App.tsx","index.tsx"],"names":["getAll","url","fetch","then","response","json","TodoCard","todo","className","user","name","title","completed","Button","setSortType","sortType","type","onClick","App","useState","todos","setTodos","isLoading","setLoading","loadData","a","todosFromServer","usersFromServer","todosWithUsers","map","find","id","userId","visibleTodos","useMemo","sort","b","localeCompare","getVisibleTodos","key","ReactDOM","render","document","getElementById"],"mappings":"iSAeMA,G,MAAS,SAAIC,GACjB,OAAOC,MAhBO,uCAgBSD,GACpBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCVlBC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,oCACE,wBAAIC,UAAU,cAAcD,EAAKE,KAAOF,EAAKE,KAAKC,KAAO,WACzD,8BAAOH,EAAKI,OACZ,uBAAGH,UAAU,qBACVD,EAAKK,UACF,uBAAGJ,UAAU,kBAAb,aACA,uBAAGA,UAAU,4BAAb,iBCNGK,EAA2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,SAAUJ,EAA1B,EAA0BA,MAA1B,OACtC,4BACEK,KAAK,SACLR,UAAU,iDACVS,QAAS,kBAAMH,EAAYC,KAE1BJ,ICsEUO,EAxDH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTJ,EADS,KACCD,EADD,OAEUK,mBAAiB,IAF3B,mBAETC,EAFS,KAEFC,EAFE,OAGgBF,oBAAS,GAHzB,mBAGTG,EAHS,KAGEC,EAHF,KAKVC,EAAQ,uCAAG,gCAAAC,EAAA,6DACfF,GAAW,GADI,SHZWvB,EAAa,UGYxB,cAET0B,EAFS,gBHbW1B,EAAa,UGaxB,OAGT2B,EAHS,OAKTC,EAAiBF,EAAgBG,KAAI,SAAAtB,GAAI,kCAC1CA,GAD0C,IAE7CE,KAAMkB,EAAgBG,MAAK,SAAArB,GAAI,OAAIA,EAAKsB,KAAOxB,EAAKyB,eAGtDX,EAASO,GAVM,2CAAH,qDAaRK,EAAeC,mBAAQ,WAC3B,OAxCoB,SAACd,EAAeL,GAEtC,OAAQA,GACN,IAAK,QACH,OAAO,YAAIK,GAAOe,MAAK,SAACV,EAAGW,GAAJ,OAAUX,EAAEd,MAAM0B,cAAcD,EAAEzB,UAE3D,IAAK,KACH,OAAO,YAAIS,GAAOe,MAAK,SAACV,EAAGW,GAAJ,OAAUX,EAAEM,GAAKK,EAAEL,MAE5C,IAAK,WACH,OAAO,YAAIX,GAAOe,MAAK,SAACV,EAAGW,GACzB,OAAQX,EAAEhB,MAAQ2B,EAAE3B,KAChBgB,EAAEhB,KAAKC,KAAK2B,cAAcD,EAAE3B,KAAKC,MACjC,KAGR,QACE,OAAOU,GAuBFkB,CAAgBlB,EAAOL,KAC7B,CAACK,EAAOL,IAEX,OACE,yBAAKP,UAAU,WACb,qDACEc,EAWE,oCACE,yBAAKd,UAAU,WACb,kBAAC,EAAD,CAAQM,YAAaA,EAAaH,MAAM,gBAAgBI,SAAS,UACjE,kBAAC,EAAD,CAAQD,YAAaA,EAAaH,MAAM,aAAaI,SAAS,OAC9D,kBAAC,EAAD,CAAQD,YAAaA,EAAaH,MAAM,eAAeI,SAAS,cAGlE,wBAAIP,UAAU,aACXyB,EAAaJ,KAAI,SAAAtB,GAAI,OACpB,wBAAIgC,IAAKhC,EAAKwB,GAAIvB,UAAU,mBAC1B,kBAAC,EAAD,CAAUD,KAAMA,UAnBxB,4BACES,KAAK,SACLR,UAAU,4CACVS,QAASO,GAHX,gBCnDVgB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.c51181ea.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport interface User {\n  id: number;\n  name: string;\n}\n\nexport interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n  user?: User;\n}\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => getAll<User>('/users');\nexport const getTodos = () => getAll<Todo>('/todos');\n","import React from 'react';\nimport { Todo } from '../helpers/api';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoCard: React.FC<Props> = ({ todo }) => (\n  <>\n    <h5 className=\"todo__user\">{todo.user ? todo.user.name : 'Unknown'}</h5>\n    <span>{todo.title}</span>\n    <i className=\"secondary-content\">\n      {todo.completed\n        ? <i className=\"material-icons\">Completed</i>\n        : <i className=\"material-icons color-red\">In Process</i>}\n    </i>\n  </>\n);\n","import React, { FC } from 'react';\n\ninterface ButtonProps {\n  setSortType: (sortType: string) => void;\n  title: string;\n  sortType: string;\n}\n\nexport const Button: FC <ButtonProps> = ({ setSortType, sortType, title }) => (\n  <button\n    type=\"button\"\n    className=\"sort-button waves-effect waves-light btn mgb20\"\n    onClick={() => setSortType(sortType)}\n  >\n    {title}\n  </button>\n);\n","import React, { useMemo, useState } from 'react';\nimport './App.scss';\n\nimport { getUsers, getTodos, Todo } from './helpers/api';\nimport { TodoCard } from './components/TodoCard';\nimport { Button } from './components/Button';\n\nconst getVisibleTodos = (todos: Todo[], sortType: string) => {\n\n  switch (sortType) {\n    case 'title':\n      return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n\n    case 'id':\n      return [...todos].sort((a, b) => a.id - b.id);\n\n    case 'userName':\n      return [...todos].sort((a, b) => {\n        return (a.user && b.user)\n          ? a.user.name.localeCompare(b.user.name)\n          : 0;\n      });\n\n    default:\n      return todos;\n  }\n};\n\nconst App = () => {\n  const [sortType, setSortType] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setLoading] = useState(false);\n\n  const loadData = async () => {\n    setLoading(true);\n    const todosFromServer = await getTodos();\n    const usersFromServer = await getUsers();\n\n    const todosWithUsers = todosFromServer.map(todo => ({\n      ...todo,\n      user: usersFromServer.find(user => user.id === todo.userId),\n    }));\n\n    setTodos(todosWithUsers);\n  };\n\n  const visibleTodos = useMemo(() => {\n    return getVisibleTodos(todos, sortType);\n  }, [todos, sortType]);\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Dynamic list of TODOs</h1>\n      {!isLoading\n        ? (\n          <button\n            type=\"button\"\n            className=\"button waves-effect waves-light btn mgb20\"\n            onClick={loadData}\n          >\n            load todos\n          </button>\n        )\n        : (\n          <>\n            <div className=\"buttons\">\n              <Button setSortType={setSortType} title=\"Sort by title\" sortType=\"title\" />\n              <Button setSortType={setSortType} title=\"Sort by id\" sortType=\"id\" />\n              <Button setSortType={setSortType} title=\"Sort by name\" sortType=\"userName\" />\n            </div>\n\n            <ul className=\"todo-list\">\n              {visibleTodos.map(todo => (\n                <li key={todo.id} className=\"todo-list__item\">\n                  <TodoCard todo={todo} />\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}