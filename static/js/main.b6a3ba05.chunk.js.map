{"version":3,"sources":["helpers/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","helpers/sortTodos.js","index.js"],"names":["URL","getTodos","a","fetch","response","json","getUser","id","data","TodoList","todos","setTitle","setStatus","setSelectedUser","handleComplete","className","type","name","placeholder","onChange","e","target","value","map","todo","key","classNames","TodoList__item","completed","checked","title","onClick","userId","defaultProps","CurrentUser","selectedUserId","useState","user","setUser","errorMessage","setErrorMessage","loadData","todosFromServer","useEffect","email","phone","App","setTodos","setSelectedUserId","status","filteredTodos","sortType","filter","getVisibleTodos","visibleTodos","includes","todoId","completeTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6a3ba05.chunk.js","sourcesContent":["const URL = `https://mate-api.herokuapp.com`;\n\nexport const getTodos = async() => {\n  const response = await fetch(`${URL}/todos/`);\n\n  return response.json();\n};\n\nexport const getUser = async(id) => {\n  const data = await fetch(`${URL}/users/${id}`);\n\n  return data.json();\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  setTitle,\n  setStatus,\n  setSelectedUser,\n  handleComplete,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <input\n      type=\"text\"\n      name=\"title\"\n      className=\"TodoList__input\"\n      placeholder=\"Enter the title\"\n      onChange={(e) => {\n        setTitle(e.target.value);\n      }}\n    />\n\n    <select\n      name=\"select\"\n      id=\"TodoList__select\"\n      className=\"TodoList__select\"\n      onChange={(e) => {\n        setStatus(e.target.value);\n      }}\n    >\n      <option value=\"\">\n        All todos\n      </option>\n\n      <option value=\"completed\">\n        Complited todos\n      </option>\n\n      <option value=\"active\">\n        Active todos\n      </option>\n    </select>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames({\n              TodoList__item: true,\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => {\n                  handleComplete(todo.id);\n                }}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n              type=\"button\"\n              onClick={() => {\n                setSelectedUser(todo.userId);\n              }}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      userId: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      id: PropTypes.number.isRequired,\n    }),\n  ),\n  setSelectedUser: PropTypes.func.isRequired,\n  setTitle: PropTypes.func.isRequired,\n  setStatus: PropTypes.func.isRequired,\n  handleComplete: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../helpers/api';\n\nexport const CurrentUser = ({\n  userId,\n  selectedUserId,\n  setSelectedUser,\n}) => {\n  const [user, setUser] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const loadData = async() => {\n    try {\n      const todosFromServer = await getUser(selectedUserId);\n\n      setUser(todosFromServer.data);\n    } catch (error) {\n      setErrorMessage('Loading error');\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Selected user: ${userId}`}\n        </span>\n      </h2>\n      {errorMessage && <span className=\"error\">{errorMessage}</span>}\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"CurrentUser__clear\"\n        onClick={() => {\n          setUser('');\n\n          setSelectedUser('');\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  setSelectedUser: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getTodos } from './helpers/api';\nimport { getVisibleTodos } from './helpers/sortTodos';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [title, setTitle] = useState('');\n  const [status, setStatus] = useState('');\n\n  const loadData = async() => {\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer.data);\n    } catch (error) {\n      setErrorMessage('Loading error');\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const filteredTodos = getVisibleTodos(todos, status);\n\n  const handleComplete = (todoId) => {\n    const completeTodo = filteredTodos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(completeTodo);\n  };\n\n  const visibleTodos = filteredTodos.filter(todo => todo.title.includes(title));\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={visibleTodos}\n          setTitle={setTitle}\n          status={status}\n          setStatus={setStatus}\n          setSelectedUser={setSelectedUserId}\n          handleComplete={handleComplete}\n        />\n        {errorMessage && <span className=\"error\">{errorMessage}</span>}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              setSelectedUser={setSelectedUserId}\n              selectedUserId={selectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","export const getVisibleTodos = (todos, sortType) => {\n  switch (sortType) {\n    case 'completed':\n      return todos.filter(todo => todo.completed === true);\n\n    case 'active':\n      return todos.filter(todo => todo.completed === false);\n\n    default:\n      return todos.filter(todo => todo.title && todo.userId);\n  }\n};\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}