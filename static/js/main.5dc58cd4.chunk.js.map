{"version":3,"sources":["helpers/api.ts","components/TodoCard.tsx","components/Button.tsx","App.tsx","index.tsx"],"names":["getAllTodos","url","fetch","then","response","json","TodoCard","todo","className","user","name","title","completed","Button","setSortType","sortType","type","onClick","App","useState","todos","setTodos","isLoading","setLoading","isLoaded","setIsLoaded","errorMessage","setErrorMessage","loadData","a","Promise","all","todosFromServer","usersFromServer","todosWithUsers","map","find","id","userId","visibleTodos","useMemo","sort","b","localeCompare","getVisibleTodos","disabled","key","ReactDOM","render","document","getElementById"],"mappings":"iSAeMA,G,MAAc,SAAIC,GACtB,OAAOC,MAhBO,uCAgBSD,GACpBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCVlBC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,oCACE,wBAAIC,UAAU,cAAcD,EAAKE,KAAOF,EAAKE,KAAKC,KAAO,WACzD,8BAAOH,EAAKI,OACZ,uBAAGH,UAAU,qBACVD,EAAKK,UACF,uBAAGJ,UAAU,kBAAb,aACA,uBAAGA,UAAU,4BAAb,iBCNGK,EAA2B,SAAC,GAAD,IAEpCC,EAFoC,EAEpCA,YACAC,EAHoC,EAGpCA,SACAJ,EAJoC,EAIpCA,MAJoC,OAOtC,4BACEK,KAAK,SACLR,UAAU,iDACVS,QAAS,kBAAMH,EAAYC,KAE1BJ,IC+FUO,EApFH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTJ,EADS,KACCD,EADD,OAEUK,mBAAiB,IAF3B,mBAETC,EAFS,KAEFC,EAFE,OAGgBF,oBAAkB,GAHlC,mBAGTG,EAHS,KAGEC,EAHF,OAIgBJ,oBAAkB,GAJlC,mBAITK,EAJS,KAICC,EAJD,OAKwBN,mBAAiB,IALzC,mBAKTO,EALS,KAKKC,EALL,KAOVC,EAAQ,uCAAG,oCAAAC,EAAA,6DACfN,GAAW,GADI,kBAIoCO,QAAQC,IACvD,CHtBsB/B,EAAkB,UADlBA,EAAkB,YGkB7B,mCAINgC,EAJM,KAIWC,EAJX,KAQPC,EAAiBF,EAAgBG,KAAI,SAAC5B,GAAD,mBAAC,eACvCA,GADsC,IAEzCE,KAAMwB,EAAgBG,MAAK,SAAC3B,GAAD,OAAUA,EAAK4B,KAAO9B,EAAK+B,eAGxDjB,EAASa,GAbI,kDAebP,EAAgB,yCAfH,QAkBfJ,GAAW,GACXE,GAAY,GAnBG,0DAAH,qDAsBRc,EAAeC,mBAAQ,WAC3B,OAtDoB,SAACpB,EAAeL,GAEtC,OAAQA,GACN,IAAK,QACH,OAAO,YAAIK,GACRqB,MAAK,SAACZ,EAAGa,GAAJ,OAAUb,EAAElB,MAAMgC,cAAcD,EAAE/B,UAE5C,IAAK,KACH,OAAO,YAAIS,GACRqB,MAAK,SAACZ,EAAGa,GAAJ,OAAUb,EAAEQ,GAAKK,EAAEL,MAE7B,IAAK,WACH,OAAO,YAAIjB,GACRqB,MAAK,SAACZ,EAAGa,GACR,OAAQb,EAAEpB,MAAQiC,EAAEjC,KAChBoB,EAAEpB,KAAKC,KAAKiC,cAAcD,EAAEjC,KAAKC,MACjC,KAGV,QACE,OAAOU,GAkCFwB,CAAgBxB,EAAOL,KAC7B,CAACK,EAAOL,IAEX,OACE,yBAAKP,UAAU,WACb,sDACEgB,GAEE,oCACE,4BACER,KAAK,SACL6B,SAAUvB,EACVd,UAAU,4CACVS,QAASW,GAERN,EAAY,aAAe,cAE7BI,GAAgB,0BAAMlB,UAAU,SAASkB,IAI/CF,GAEG,oCACE,yBAAKhB,UAAU,WACb,kBAAC,EAAD,CACEM,YAAaA,EACbH,MAAM,gBACNI,SAAS,UAEX,kBAAC,EAAD,CACED,YAAaA,EACbH,MAAM,aACNI,SAAS,OAEX,kBAAC,EAAD,CACED,YAAaA,EACbH,MAAM,eACNI,SAAS,cAGb,wBAAIP,UAAU,aACX+B,EAAaJ,KAAI,SAAA5B,GAAI,OACpB,wBAAIuC,IAAKvC,EAAK8B,GAAI7B,UAAU,mBAC1B,kBAAC,EAAD,CAAUD,KAAMA,YCrGlCwC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.5dc58cd4.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport interface User {\n  id: number;\n  name: string;\n}\n\nexport interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n  user?: User;\n}\n\nconst getAllTodos = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => getAllTodos<User>('/users');\nexport const getTodos = () => getAllTodos<Todo>('/todos');\n","import React from 'react';\nimport { Todo } from '../helpers/api';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoCard: React.FC<Props> = ({ todo }) => (\n  <>\n    <h5 className=\"todo__user\">{todo.user ? todo.user.name : 'Unknown'}</h5>\n    <span>{todo.title}</span>\n    <i className=\"secondary-content\">\n      {todo.completed\n        ? <i className=\"material-icons\">Completed</i>\n        : <i className=\"material-icons color-red\">In Process</i>}\n    </i>\n  </>\n);\n","import React, { FC } from 'react';\n\ninterface ButtonProps {\n  setSortType: (sortType: string) => void;\n  title: string;\n  sortType: string;\n}\n\nexport const Button: FC <ButtonProps> = (\n  {\n    setSortType,\n    sortType,\n    title,\n  },\n) => (\n  <button\n    type=\"button\"\n    className=\"sort-button waves-effect waves-light btn mgb20\"\n    onClick={() => setSortType(sortType)}\n  >\n    {title}\n  </button>\n);\n","import React, { useMemo, useState } from 'react';\nimport './App.scss';\n\nimport { getUsers, getTodos, Todo } from './helpers/api';\nimport { TodoCard } from './components/TodoCard';\nimport { Button } from './components/Button';\n\nconst getVisibleTodos = (todos: Todo[], sortType: string) => {\n\n  switch (sortType) {\n    case 'title':\n      return [...todos]\n        .sort((a, b) => a.title.localeCompare(b.title));\n\n    case 'id':\n      return [...todos]\n        .sort((a, b) => a.id - b.id);\n\n    case 'userName':\n      return [...todos]\n        .sort((a, b) => {\n          return (a.user && b.user)\n            ? a.user.name.localeCompare(b.user.name)\n            : 0;\n        });\n\n    default:\n      return todos;\n  }\n};\n\nconst App = () => {\n  const [sortType, setSortType] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const loadData = async () => {\n    setLoading(true);\n\n    try {\n      const [todosFromServer, usersFromServer] = await Promise.all(\n        [getTodos(), getUsers()],\n      );\n\n      const todosWithUsers = todosFromServer.map((todo) => ({\n        ...todo,\n        user: usersFromServer.find((user) => user.id === todo.userId),\n      }));\n\n      setTodos(todosWithUsers);\n    } catch (error) {\n      setErrorMessage('Loading error, please try again later');\n    }\n\n    setLoading(false);\n    setIsLoaded(true);\n  };\n\n  const visibleTodos = useMemo(() => {\n    return getVisibleTodos(todos, sortType);\n  }, [todos, sortType]);\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Dynamic list of TODOs</h1>\n      {!isLoaded\n        && (\n          <>\n            <button\n              type=\"button\"\n              disabled={isLoading}\n              className=\"button waves-effect waves-light btn mgb20\"\n              onClick={loadData}\n            >\n              {isLoading ? 'Loading...' : 'load todos'}\n            </button>\n            {errorMessage && <span className=\"error\">{errorMessage}</span>}\n          </>\n        )}\n\n      {isLoaded\n        && (\n          <>\n            <div className=\"buttons\">\n              <Button\n                setSortType={setSortType}\n                title=\"Sort by title\"\n                sortType=\"title\"\n              />\n              <Button\n                setSortType={setSortType}\n                title=\"Sort by id\"\n                sortType=\"id\"\n              />\n              <Button\n                setSortType={setSortType}\n                title=\"Sort by name\"\n                sortType=\"userName\"\n              />\n            </div>\n            <ul className=\"todo-list\">\n              {visibleTodos.map(todo => (\n                <li key={todo.id} className=\"todo-list__item\">\n                  <TodoCard todo={todo} />\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}